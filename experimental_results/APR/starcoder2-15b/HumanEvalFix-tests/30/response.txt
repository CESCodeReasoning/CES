<fim_prefix>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in get_positive.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def get_positive(l: list):
    return [e for e in l if e < 0]

Tests:
def check(get_positive):
    assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert get_positive([-1, -2]) == []
    assert get_positive([]) == []

check(get_positive)

The fixed code should satisfy the following natural language specification:
Write a Python function `get_positive(l: list)` to solve the following problem:
Return only positive numbers in the list.
<fim_suffix><fim_middle>
Fixed Code:
```python
def get_positive(l: list):
    return [e for e in l if e > 0]
```


    
Fix bugs in get_positive.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def get_positive(l: list):
    return [e for e in l if e < 0]

Tests:
def check(get_positive):
    assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert get_positive([-1, -2]) == []
    assert get_positive([]) == []

check(get_positive)

The fixed code should satisfy the following natural language specification:
Write a Python function `get_positive(l: list)` to solve the following problem:
Return only positive numbers in the list.

Fixed Code:
```python
def get_positive(l: list):
    return [e for e in l if e > 0]
```


    
Fix bugs in get_positive.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def get_positive(l: list):
    return [e for e in l if e < 0]

Tests:
def check(get_positive):
    assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert get_positive([-1, -2]) == []
    assert get_positive([]) == []

check(get_positive)

The fixed code should satisfy the following natural language specification:
Write a Python function `get