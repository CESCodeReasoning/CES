<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in sum_squares.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def sum_squares(lst):
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)*2
    return squared

Tests:
def check(sum_squares):

    # Check some simple cases
    assert sum_squares([1,2,3])==14, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1.0,2,3])==14, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1,3,5,7])==84, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1.4,4.2,0])==29, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([-2.4,1,1])==6, "This prints if this assert fails 1 (good for debugging!)"

    assert sum_squares([100,1,15,2])==10230, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([10000,10000])==200000000, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([-1.4,4.6,6.3])==75, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([-1.4,17.9,18.9,19.9])==1086, "This prints if this assert fails 1 (good for debugging!)"


    # Check some edge cases that are easy to work out by hand.
    assert sum_squares([0])==0, "This prints if this assert fails 2 (also good for debugging!)"
    assert sum_squares([-1])==1, "This prints if this assert fails 2 (also good for debugging!)"
    assert sum_squares([-1,1,0])==2, "This prints if this assert fails 2 (also good for debugging!)"

check(sum_squares)

The fixed code should satisfy the following natural language specification:
Write a Python function `sum_squares(lst)` to solve the following problem:
You are given a list of numbers.
You need to return the sum of squared numbers in the given list,
round each element in the list to the upper int(Ceiling) first.
Examples:
For lst = [1,2,3] the output should be 14
For lst = [1,4,9] the output should be 98
For lst = [1,3,5,7] the output should be 84
For lst = [1.4,4.2,0] the output should be 29
For lst = [-2.4,1,1] the output should be 6

Note:
- The list can be empty.
- The list can contain negative numbers.
- The list can contain decimal numbers.
- The list can contain both integer and decimal numbers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive and negative integers.
- The list can contain both positive and negative decimal numbers.
- The list can contain both positive