<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in fib.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    return fib(n - 1) + fib(n - 2)

Tests:
def check(fib):
    assert fib(10) == 55
    assert fib(1) == 1
    assert fib(8) == 21
    assert fib(11) == 89
    assert fib(12) == 144

check(fib)

The fixed code should satisfy the following natural language specification:
Write a Python function `fib(n: int)` to solve the following problem:
Return n-th Fibonacci number.

Fixed Code:
```python
def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
```


    
Fix bugs in is_palindrome.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def is_palindrome(s: str) -> bool:
    if len(s) == 0:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome(s[1:-1])

Tests:
def check(is_palindrome):
    assert is_palindrome("radar") == True
    assert is_palindrome("python") == False
    assert is_palindrome("a") == True
    assert is_palindrome("") == True
    assert is_palindrome("aibohphobia") == True

check(is_palindrome)

The fixed code should satisfy the following natural language specification:
Write a Python function `is_palindrome(s: str) -> bool` to solve the following problem:
Check if a given string is a palindrome.

Fixed Code:
```python
def is_palindrome(s: str) -> bool:
    if len(s) < 2:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome(s[1:-1])
```


    
Fix bugs in is_sorted.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
from typing import List
def is_sorted(lst: List[int]) -> bool:
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

Tests:
def check(is_sorted):
    assert is_sorted([1, 2, 3, 4, 5]) == True
    assert