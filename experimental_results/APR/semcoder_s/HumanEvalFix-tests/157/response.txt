<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in right_angle_triangle.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def right_angle_triangle(a, b, c):
    return c*c == a*a + b*b

Tests:
def check(right_angle_triangle):

    # Check some simple cases
    assert right_angle_triangle(3, 4, 5) == True, "This prints if this assert fails 1 (good for debugging!)"
    assert right_angle_triangle(1, 2, 3) == False
    assert right_angle_triangle(10, 6, 8) == True
    assert right_angle_triangle(2, 2, 2) == False
    assert right_angle_triangle(7, 24, 25) == True
    assert right_angle_triangle(10, 5, 7) == False
    assert right_angle_triangle(5, 12, 13) == True
    assert right_angle_triangle(15, 8, 17) == True
    assert right_angle_triangle(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert right_angle_triangle(1, 1, 1) == False, "This prints if this assert fails 2 (also good for debugging!)"
    assert right_angle_triangle(2, 2, 10) == False

check(right_angle_triangle)

The fixed code should satisfy the following natural language specification:
Write a Python function `right_angle_triangle(a, b, c)` to solve the following problem:
Given the lengths of the three sides of a triangle. Return True if the three
sides form a right-angled triangle, False otherwise.
A right-angled triangle is a triangle in which one angle is right angle or
90 degree.
Example:
right_angle_triangle(3, 4, 5) == True
right_angle_triangle(1, 2, 3) == False

Fixed Code:
```python
def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[2]*sides[2] == sides[0]*sides[0] + sides[1]*sides[1]
```<｜end▁of▁sentence｜>