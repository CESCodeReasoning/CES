<s> [INST]<<SYS>>
You are an expert Python programmer.
<</SYS>>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```



Fix bugs in closest_integer. 
Enclose the fixed code inside ```python and ```.

Buggy Code:
def closest_integer(value):
    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = floor(num)
        else:
            res = ceil(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

Tests:
def check(closest_integer):

    # Check some simple cases
    assert closest_integer("10") == 10, "Test 1"
    assert closest_integer("14.5") == 15, "Test 2"
    assert closest_integer("-15.5") == -16, "Test 3"
    assert closest_integer("15.3") == 15, "Test 3"

    # Check some edge cases that are easy to work out by hand.
    assert closest_integer("0") == 0, "Test 0"

check(closest_integer)

The fixed code should satisfy the following natural language specification:
Write a Python function `closest_integer(value)` to solve the following problem:
Create a function that takes a value (string) representing a number
and returns the closest integer to it. If the number is equidistant
from two integers, round it away from zero.
Examples
[/INST]
```python
def closest_integer(value):
    from math import floor, ceil

    # Remove trailing zeros
    while value[-1] == '0':
        value = value[:-1]

    # Convert the string to a float
    num = float(value)

    # Check if the number is equidistant from two integers
    if value[-2:] == '.5':
        # Round the number away from zero
        if num > 0:
            res = floor(num)
        else:
            res = ceil(num)
    # If the number is not equidistant from two integers, round it to the nearest integer
    else:
        res = int(round(num))

    return res
```

The fixed code should satisfy the following natural language specification:
Write a Python function `closest_integer(value)` to solve the following problem:
Create a function that takes a value (string) representing a number
and returns the closest integer to it. If the number is equidistant
from two integers, round it away from zero.
Examples

The fixed code should pass the following tests:

* `closest_integer("10") == 10`
* `closest_integer("14.5") == 15`
* `closest_integer("-15.5") == -16`
* `closest_integer("15.3") == 15`
* `closest_integer("0") == 0`</s>