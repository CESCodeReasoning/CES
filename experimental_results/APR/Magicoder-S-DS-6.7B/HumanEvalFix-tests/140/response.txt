<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in fix_spaces.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def fix_spaces(text):
    new_text = ""
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == " ":
            end += 1
        else:
            if end - start > 2:
                new_text += "-"+text[i]
            elif end - start > 0:
                new_text += "_"*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += "-"
    elif end - start > 0:
        new_text += "__"
    return new_text

Tests:
def check(fix_spaces):

    # Check some simple cases
    assert fix_spaces("Example") == "Example", "This prints if this assert fails 1 (good for debugging!)"
    assert fix_spaces("Mudasir Hanif ") == "Mudasir_Hanif_", "This prints if this assert fails 2 (good for debugging!)"
    assert fix_spaces("Yellow Yellow  Dirty  Fellow") == "Yellow_Yellow__Dirty__Fellow", "This prints if this assert fails 3 (good for debugging!)"
    
    # Check some edge cases that are easy to work out by hand.
    assert fix_spaces("Exa   mple") == "Exa-mple", "This prints if this assert fails 4 (good for debugging!)"
    assert fix_spaces("   Exa 1 2 2 mple") == "-Exa_1_2_2_mple", "This prints if this assert fails 4 (good for debugging!)"

check(fix_spaces)

The fixed code should satisfy the following natural language specification:
Write a Python function `fix_spaces(text)` to solve the following problem:
Given a string text, replace all spaces in it with underscores,
and if a string has more than 2 consecutive spaces,
then replace all consecutive spaces with -
fix_spaces("Example") == "Example"
fix_spaces("Example 1") == "Example_1"
fix_spaces(" Example 2") == "_Example_2"
fix_spaces(" Example   3") == "_Example-3"
fix_spaces("Example 4  ") == "Example_4__"
fix_spaces("Example 5    ") == "Example_5__"
fix_spaces("Example 6     ") == "Example_6-"
fix_spaces("Example 7      ") == "Example_7-"
fix_spaces("Example 8       ") == "Example_8-"
fix_spaces("Example 9        ") == "Example_9-"
fix_spaces("Example 10         ") == "Example_10-"
fix_spaces("Example 11          ") == "Example_11-"
fix_spaces("Example 12           ") == "Example_12-"
fix_spaces("Example 13            ") == "Example_13-"
fix_spaces("Example 14             ") == "Example_14-"
fix_spaces("Example 15              ") == "Example_15-"
fix_spaces("Example 16               ") == "Example_16-"
fix_spaces("Example 17                ") == "Example_17-"
fix_spaces("Example 18                 ") == "Example_18-"
fix_spaces("Example 19                  ") == "Example_19-"
fix_spaces("Example 20                   ") == "Example_20-"
fix_spaces("Example 21                    ") == "Example_21-"
fix_spaces("Example 22                     ") == "Example_22-"
fix_spaces("Example 23                      ") == "Example_23-"
fix_spaces("Example 24                       ") == "Example_24-"
fix_spaces("Example 25                        ") == "Example_25-"
fix_spaces("Example 26                         ") == "Example_26-"
fix_spaces("Example 27                          ") == "Example_27-"
fix_spaces("Example 28                           ") == "Example_28-"
fix_spaces("Example 29                            ") == "Example_29-"
fix_spaces("Example 30                             ") == "Example_30-"
fix_spaces("Example 31