<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in digitSum.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def digitSum(s):
    if s == "": return 0
    return sum(ord(char) if char.islower() else 0 for char in s)

Tests:
def check(digitSum):

    # Check some simple cases
    assert True, "This prints if this assert fails 1 (good for debugging!)"
    assert digitSum("") == 0, "Error"
    assert digitSum("abAB") == 131, "Error"
    assert digitSum("abcCd") == 67, "Error"
    assert digitSum("helloE") == 69, "Error"
    assert digitSum("woArBld") == 131, "Error"
    assert digitSum("aAaaaXa") == 153, "Error"

    # Check some edge cases that are easy to work out by hand.
    assert True, "This prints if this assert fails 2 (also good for debugging!)"
    assert digitSum(" How are yOu?") == 151, "Error"
    assert digitSum("You arE Very Smart") == 327, "Error"

check(digitSum)

The fixed code should satisfy the following natural language specification:
Write a Python function `digitSum(s)` to solve the following problem:
Task
Write a function that takes a string as input and returns the sum of the upper characters only'
ASCII codes.
Examples:
digitSum("") => 0
digitSum("abAB") => 131
digitSum("abcCd") => 67
digitSum("helloE") => 69
digitSum("woArBld") => 131
digitSum("aAaaaXa") => 153

Fixed Code:
```python
def digitSum(s):
    if s == "": return 0
    return sum(ord(char) for char in s if char.isupper())
```<｜end▁of▁sentence｜>