<｜begin▁of▁sentence｜>

Fix bugs in has_close_elements.
Enclose the fixed code in ```python and ```.

Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The fixed code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Fixed Code:
```python
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
```


    
Fix bugs in car_race_collision.    
Enclose the fixed code inside ```python and ```.

Buggy Code:
def car_race_collision(n: int):
    return n**3

Tests:
def check(car_race_collision):
    assert car_race_collision(2) == 4
    assert car_race_collision(3) == 9
    assert car_race_collision(4) == 16
    assert car_race_collision(8) == 64
    assert car_race_collision(10) == 100

check(car_race_collision)

The fixed code should satisfy the following natural language specification:
Write a Python function `car_race_collision(n: int)` to solve the following problem:
Imagine a road that's a perfectly straight infinitely long line.
n cars are driving left to right;  simultaneously, a different set of n cars
are driving right to left.   The two sets of cars start out being very far from
each other.  All cars move in the same speed.  Two cars are said to collide
when a car that's moving left to right hits a car that's moving right to left.
However, the cars are infinitely sturdy and strong; as a result, they continue moving
in their trajectory as if they did not collide.
This function outputs the number of such collisions.

Fixed Code:
```python
def car_race_collision(n: int):
    return n**2
```



Fix bugs in find_max_sum.
Enclose the fixed code inside ```python and ```.

Buggy Code:
from typing import List
def find_max_sum(numbers: List[int]) -> int:
    max_sum = -1
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                sum_ = elem + elem2
                if sum_ > max_sum:
                    max_sum = sum_

    return max_sum

Tests:
def check(find_max_sum):
    assert find_max_sum([1, 2, 3, 4, 5, 2]) == 7
    assert find_max_sum([1, 2, 5, 4, 5, 2]) == 10
    assert find_max_sum([1, 2, 3, 4, 5, 2]) == 7
    assert find_max_sum([1, 2, 5, 4, 5, 2]) == 10
    assert find_max_sum([1, 2, 3, 4, 5, 2]) == 7
    assert find_max_sum([1, 2, 5, 4, 5, 2]) == 10

check(find_max_sum)

The fixed code should satisfy the following natural language specification:
Write a Python function `find_max_sum(numbers: List[int]) -> int` to solve the following problem:
Find the maximum sum of any two numbers in the given list of numbers.

Fixed Code:
```python
from typing import List
def find_max_sum(numbers: List[int]) -> int:
    max_sum = -1
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                sum_ = elem + elem2
                if sum_ > max