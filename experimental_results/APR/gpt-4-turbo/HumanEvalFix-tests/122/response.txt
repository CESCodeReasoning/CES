Here are the fixed versions of the two functions `has_close_elements` and `add_elements` based on the provided specifications and test cases.

### Fixed Code for `has_close_elements`

```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `add_elements`

```python
def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(abs(elem))) <= 2)

def check(add_elements):
    assert add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4
    assert add_elements([111, 121, 3, 4000, 5, 6], 2) == 3
    assert add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125
    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24, "This prints if this assert fails 1 (good for debugging!)"
    assert add_elements([1], 1) == 1, "This prints if this assert fails 2 (also good for debugging!)"

check(add_elements)
```

### Explanation:

1. **has_close_elements**: The function was already correct except for the missing `abs()` function to ensure the distance is always positive. This is crucial because the distance between two numbers should be considered regardless of their order.

2. **add_elements**: The original function did not consider the parameter `k` and was not filtering based on the number of digits correctly. The fixed version slices the array up to `k` elements and checks if the absolute value of each element, converted to a string, has at most two digits. This ensures that negative numbers are also handled correctly.