Here are the fixed versions of the two functions, `has_close_elements` and `change_base`, along with their respective test cases:

### Fixed `has_close_elements` Function
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure distance correctly
                if distance < threshold:
                    return True
    return False

# Tests
def check_has_close_elements(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check_has_close_elements(has_close_elements)
```

### Fixed `change_base` Function
```python
def change_base(x: int, base: int) -> str:
    if x == 0:
        return "0"
    ret = ""
    while x > 0:
        ret = str(x % base) + ret
        x = x // base  # Use integer division to correctly reduce x
    return ret

# Tests
def check_change_base(change_base):
    assert change_base(8, 3) == "22"
    assert change_base(9, 3) == "100"
    assert change_base(234, 2) == "11101010"
    assert change_base(16, 2) == "10000"
    assert change_base(8, 2) == "1000"
    assert change_base(7, 2) == "111"
    for x in range(2, 8):
        assert change_base(x, x + 1) == str(x)

check_change_base(change_base)
```

These fixes address the issues in the original code:
- For `has_close_elements`, the absolute value is used to correctly calculate the distance between two numbers.
- For `change_base`, integer division (`//`) is used instead of subtraction to correctly reduce the value of `x` during the conversion process. Additionally, a check for `x == 0` is added to handle the case where the input is zero.