Here are the fixed versions of the two functions, `has_close_elements` and `even_odd_count`, along with their respective test cases:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False

# Tests
def check_has_close_elements(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check_has_close_elements(has_close_elements)
```

### Fixed Code for `even_odd_count`
```python
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)

# Tests
def check_even_odd_count(even_odd_count):
    assert even_odd_count(7) == (0, 1)
    assert even_odd_count(-78) == (1, 1)
    assert even_odd_count(3452) == (2, 2)
    assert even_odd_count(346211) == (3, 3)
    assert even_odd_count(-345821) == (3, 3)
    assert even_odd_count(-2) == (1, 0)
    assert even_odd_count(-45347) == (2, 3)
    assert even_odd_count(0) == (1, 0)

check_even_odd_count(even_odd_count)
```

These corrected versions of the functions now properly handle the requirements specified in the problem statements and pass all the provided test cases.