Here are the fixed versions of the two functions, `has_close_elements` and `longest`, with the necessary corrections and improvements:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure distance correctly
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `longest`
```python
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)  # Find the maximum length
    for s in strings:
        if len(s) == maxlen:  # Use == to find the first string that matches the maximum length
            return s
```

These corrections ensure that the functions behave as specified in the problem descriptions. The `has_close_elements` function now correctly calculates the distance using the absolute value, and the `longest` function correctly identifies the first string of maximum length in the list.