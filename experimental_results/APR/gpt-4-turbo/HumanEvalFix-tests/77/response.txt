Here are the fixed versions of the two functions `has_close_elements` and `iscube` with their respective test cases:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False

# Tests
def check_has_close_elements(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check_has_close_elements(has_close_elements)
```

### Fixed Code for `iscube`
```python
def iscube(a: int) -> bool:
    a = abs(a)
    cube_root = round(a ** (1. / 3))
    return cube_root ** 3 == a

# Tests
def check_iscube(iscube):
    assert iscube(1) == True, "First test error: " + str(iscube(1))
    assert iscube(2) == False, "Second test error: " + str(iscube(2))
    assert iscube(-1) == True, "Third test error: " + str(iscube(-1))
    assert iscube(64) == True, "Fourth test error: " + str(iscube(64))
    assert iscube(180) == False, "Fifth test error: " + str(iscube(180))
    assert iscube(1000) == True, "Sixth test error: " + str(iscube(1000))
    assert iscube(0) == True, "1st edge test error: " + str(iscube(0))
    assert iscube(1728) == True, "2nd edge test error: " + str(iscube(1728))

check_iscube(iscube)
```

These fixes address the issues in the original code:
- For `has_close_elements`, the absolute value of the difference is used to correctly calculate the distance between two numbers.
- For `iscube`, the cube root is calculated and then cubed to check if it matches the original number, ensuring that the function correctly identifies cube numbers.