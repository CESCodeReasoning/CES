Here are the fixed versions of the two functions, `has_close_elements` and `string_to_md5`, with the necessary corrections and improvements:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to calculate the correct distance
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `string_to_md5`
```python
def string_to_md5(text: str):
    import hashlib
    if text:  # Check if text is not empty
        return hashlib.md5(text.encode()).hexdigest()  # Correctly encode the text and compute MD5
    else:
        return None
```

These corrections address the issues in the original code:
1. In `has_close_elements`, the `abs` function is used to ensure the distance is always non-negative.
2. In `string_to_md5`, the text is correctly encoded to bytes before hashing, and the variable `text` is used instead of the string literal `'text'`.