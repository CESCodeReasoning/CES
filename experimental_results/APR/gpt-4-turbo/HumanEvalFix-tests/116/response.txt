```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False
```

For the second part of your request regarding the `sort_array` function, here is the corrected code:

```python
def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))

# Tests
def check(sort_array):
    assert sort_array([1,5,2,3,4]) == [1, 2, 3, 4, 5]
    assert sort_array([-2,-3,-4,-5,-6]) == [-6, -5, -4, -3, -2]
    assert sort_array([1,0,2,3,4]) == [0, 1, 2, 3, 4]
    assert sort_array([]) == []
    assert sort_array([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 3, 3, 4, 4, 5, 5, 5, 7, 77]
    assert sort_array([3,6,44,12,32,5]) == [3, 5, 6, 12, 32, 44]
    assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]

check(sort_array)
```

This corrected version of `sort_array` sorts the array based on the number of ones in the binary representation of each number, and for numbers with the same count of ones, it sorts them by their decimal values.