Here are the fixed versions of the two functions, `has_close_elements` and `f`, with the corrections made to address the issues in the original code:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to calculate the correct distance
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `f`
```python
def f(n):
    ret = []
    for i in range(1, n+1):
        if i % 2 == 0:
            x = 1
            for j in range(1, i+1):
                x *= j  # Correctly compute the factorial for even i
        else:
            x = sum(range(1, i+1))  # Sum the numbers from 1 to i for odd i
        ret.append(x)  # Use append instead of += [x] for clarity and efficiency
    return ret
```

These corrections ensure that the functions behave as specified in the problem descriptions. The `has_close_elements` function now correctly calculates the distance between elements using the absolute value, and the `f` function correctly computes either the factorial or the sum based on the parity of the index.