Here are the fixed versions of both functions, `has_close_elements` and `triangle_area`, with the necessary corrections and improvements:

### Fixed `has_close_elements` Function
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure distance correctly
                if distance < threshold:
                    return True
    return False
```

### Fixed `triangle_area` Function
```python
def triangle_area(a, b, c):
    # Check for valid triangle
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    
    # Calculate semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate area using Heron's formula
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)  # Round the result to 2 decimal places
    return area
```

These corrections ensure that the `has_close_elements` function correctly calculates the absolute distance between elements to check against the threshold, and the `triangle_area` function uses the correct formula for the semi-perimeter in Heron's formula, rounding the final area to two decimal places.