Here are the fixed versions of the provided Python functions, `has_close_elements` and `separate_paren_groups`, with the necessary corrections and improvements:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure the distance correctly
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `separate_paren_groups`
```python
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            if current_depth == 0 and current_string:
                result.append(''.join(current_string))
                current_string = []
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)
            if current_depth == 0:
                result.append(''.join(current_string))
                current_string = []
        elif c != ' ':
            current_string.append(c)  # Handle non-parenthesis characters

    if current_string:  # Add the last group if not already added
        result.append(''.join(current_string))

    return result
```

These fixes address the following issues:
1. **has_close_elements**: The function now correctly calculates the absolute distance between elements to check if they are within the specified threshold.
2. **separate_paren_groups**: The function now correctly handles groups of nested parentheses, ensuring that each group starts and ends at the correct depth, and ignores spaces as specified. It also ensures that groups are added to the result list only when a complete group (balanced parentheses) is formed.