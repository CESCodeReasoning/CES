Here are the fixed versions of the two functions, `has_close_elements` and `sorted_list_sum`, with the corrections and improvements based on the specifications provided:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `sorted_list_sum`
```python
def sorted_list_sum(lst):
    lst = [s for s in lst if len(s) % 2 == 0]  # Filter out strings with odd lengths
    lst.sort(key=lambda x: (len(x), x))  # Sort by length first, then lexicographically
    return lst
```

These fixes address the issues in the original code:
1. For `has_close_elements`, the use of `abs` ensures that the distance is always a non-negative value, which correctly checks the closeness of elements based on the threshold.
2. For `sorted_list_sum`, the list comprehension filters out strings with odd lengths before sorting. The sorting is done first by the length of the strings and then alphabetically if lengths are equal, as specified.