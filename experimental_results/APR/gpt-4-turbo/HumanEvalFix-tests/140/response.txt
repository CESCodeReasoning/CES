Here are the fixed versions of both functions, `has_close_elements` and `fix_spaces`, with the necessary corrections and improvements:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure distance correctly
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `fix_spaces`
```python
def fix_spaces(text: str) -> str:
    new_text = ""
    i = 0
    start = 0
    while i < len(text):
        if text[i] == " ":
            i += 1
        else:
            if i - start > 2:
                new_text += "-" + text[i]
            elif i - start > 0:
                new_text += "_" * (i - start) + text[i]
            else:
                new_text += text[i]
            start = i + 1
            i += 1
    if len(text) - start > 2:
        new_text += "-"
    elif len(text) - start > 0:
        new_text += "_" * (len(text) - start)
    return new_text
```

These fixes address the issues in the original code:
- For `has_close_elements`, the distance calculation now correctly uses the absolute value to ensure that the comparison is based on the magnitude of the difference, not the direction.
- For `fix_spaces`, the logic for handling spaces and appending the correct characters to `new_text` has been corrected to ensure that spaces are replaced as specified in the problem statement. The loop and condition handling have been adjusted to correctly track and replace sequences of spaces.