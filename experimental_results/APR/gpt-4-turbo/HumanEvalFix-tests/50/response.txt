Here are the fixed versions of the `has_close_elements` and `decode_shift` functions, including the necessary corrections to ensure they work as intended:

### Fixed `has_close_elements` Function
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)  # Use absolute value to measure distance correctly
                if distance < threshold:
                    return True
    return False
```

### Fixed `decode_shift` Function
```python
def encode_shift(s: str):
    """
    Returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])

def decode_shift(s: str):
    """
    Decodes a string that was encoded with the encode_shift function.
    """
    return "".join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])
```

### Explanation of Fixes

1. **has_close_elements**: The main issue was the lack of the `abs()` function when calculating the distance between two elements. Without using `abs()`, the function could incorrectly ignore cases where `elem2` is greater than `elem1`.

2. **decode_shift**: The original decoding formula was incorrect. The correct approach is to reverse the encoding process by subtracting 5 from the ASCII value of each character, then adjusting for wrap-around using modulo 26, and finally converting back to characters. The original code incorrectly added `ord(ch)` instead of `ord('a')` after the modulo operation.

These fixes ensure that the functions behave as expected according to their specifications and pass the provided tests.