Here's the fixed code for both functions, `has_close_elements` and `smallest_change`, with the necessary corrections and improvements:

### Fixed Code for `has_close_elements`
```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False
```

### Fixed Code for `smallest_change`
```python
def smallest_change(arr):
    ans = 0
    n = len(arr)
    for i in range(n // 2):
        if arr[i] != arr[n - i - 1]:
            ans += 1
    return ans
```

### Explanation of Fixes

#### `has_close_elements`:
- The main issue was the lack of the `abs` function to calculate the absolute difference between two elements. Without this, the function could incorrectly ignore cases where `elem2` is greater than `elem1`.

#### `smallest_change`:
- The original code was incorrectly comparing `ans` with array elements, which doesn't make sense in the context of the problem. The correct approach is to compare elements at symmetric positions from the start and end of the list and count mismatches, which indicate the number of changes needed to make the array palindromic.