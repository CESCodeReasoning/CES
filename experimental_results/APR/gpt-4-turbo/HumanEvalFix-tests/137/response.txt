Here are the fixed versions of the two functions `has_close_elements` and `compare_one` with their respective test cases. The fixes address the issues in the original code and ensure that the functions work as specified.

### Fixed Code for `has_close_elements`

```python
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    return False

# Tests
def check_has_close_elements(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check_has_close_elements(has_close_elements)
```

### Fixed Code for `compare_one`

```python
def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',', '.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',', '.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b

# Tests
def check_compare_one(compare_one):
    assert compare_one(1, 2) == 2
    assert compare_one(1, 2.5) == 2.5
    assert compare_one(2, 3) == 3
    assert compare_one(5, 6) == 6
    assert compare_one(1, "2.3") == "2.3"
    assert compare_one("5.1", "6") == "6"
    assert compare_one("1", "2") == "2"
    assert compare_one("1", 1) == None

check_compare_one(compare_one)
```

These fixes ensure that the functions behave as expected according to the specifications provided. The `has_close_elements` function correctly checks for any two numbers being closer than a given threshold, and the `compare_one` function correctly handles comparisons between numbers represented as strings or numeric types, including handling different decimal separators in strings.