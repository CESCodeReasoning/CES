The function `fib` is called with ( n = 12 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 11 ) and ( n = 10 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 9 ) and ( n = 8 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 7 ) and ( n = 6 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 5 ) and ( n = 4 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 3 ) and ( n = 2 ).
The condition `n == 0` is false, therefore the first branch is not taken.
The condition `n == 1` is false, therefore the second branch is not taken.
The function calls itself recursively with ( n = 1 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0 ) and ( n = 0 ).
The condition `n == 0` is true, therefore the first branch is taken and the method returns 0.
The function calls itself recursively with ( n = 0