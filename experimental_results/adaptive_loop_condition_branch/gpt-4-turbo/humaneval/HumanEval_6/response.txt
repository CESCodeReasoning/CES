[REASONING]
The function `parse_nested_parens` is called with the input string `'(()()) ((())) () ((())()())'`.
This string represents groups of nested parentheses separated by spaces.

1. The string is split by spaces into the list `['(()())', '((()))', '()', '((())()())']`.
2. The function then iterates over each group of parentheses to determine the maximum depth of nested parentheses for each group using the helper function `parse_paren_group`.

For each group:
- '(()())':
  - Iterates over each character, adjusting the depth for each '(' and ')'.
  - Maximum depth reached is 2.
- '((()))':
  - Maximum depth reached is 3.
- '()':
  - Maximum depth reached is 1.
- '((())()())':
  - Maximum depth reached is 3.

The function returns a list of these maximum depths for each group.
[/REASONING]

[PYTHON]
from typing import *
def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s: ## [STATE]c