[REASONING]
The function `get_odd_collatz` is called with `n = 1`.
- Initially, the condition `(n % 2 == 0)` is checked. Since `1 % 2` equals `1`, which is not equal to `0`, the condition is false. Therefore, the first branch (`if n % 2 == 0`) is not taken.
- The `else` branch is taken because `n % 2` is not `0`. The list `odd_collatz` is initialized with `[1]`.
- The `while` loop condition `(n > 1)` is checked. Since `n = 1`, which is not greater than `1`, the loop does not execute.
- The function returns the sorted list `odd_collatz`, which contains `[1]`.

Thus, the output of the function call `get_odd_collatz(1)` is `[1]`.
[/REASONING]

[PYTHON]
from typing import *

def get_odd_collatz(n):
    if n % 2 == 0: ## [CONDITION](n % 2 == 0)=[False][/CONDITION][BRANCH]taken=[N][/BRANCH]
        odd_collatz = []
    else: ## [BRANCH]taken=[Y][/BRANCH]
        odd_collatz = [n]
    while n > 1: ## [STATE](n > 1)=[False][/STATE][STATE]n=[1][/STATE]
        if n % 2 == 0:
            n = n / 2
        else:
            n = n * 3 + 1

        if n % 2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
[/PYTHON]

[OUTPUT]
[1]
[/OUTPUT]