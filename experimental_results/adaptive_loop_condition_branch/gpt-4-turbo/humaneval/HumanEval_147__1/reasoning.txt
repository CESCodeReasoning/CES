The function `get_max_triples(n)` is designed to find all unique triples `(i, j, k)` where `i < j < k` and the sum of the values `A[i] + A[j] + A[k]` is divisible by 3. The values in list `A` are calculated using the formula `i*i - i + 1` for each `i` from 1 to `n`.

For `n = 6`, the list `A` is computed as follows:
- `A[0] = 1*1 - 1 + 1 = 1`
- `A[1] = 2*2 - 2 + 1 = 3`
- `A[2] = 3*3 - 3 + 1 = 7`
- `A[3] = 4*4 - 4 + 1 = 13`
- `A[4] = 5*5 - 5 + 1 = 21`
- `A[5] = 6*6 - 6 + 1 = 31`
Thus, `A = [1, 3, 7, 13, 21, 31]`.

The function then iterates over all possible triples `(i, j, k)`:
- For each `i` from 0 to 5, `j` ranges from `i+1` to 5, and `k` ranges from `j+1` to 5.
- It checks if the sum `A[i] + A[j] + A[k]` is divisible by 3.

The triples that satisfy the condition are:
- `(A[0], A[1], A[4]) = (1, 3, 21)` which sums to 25 (not divisible by 3).
- `(A[0], A[1], A[5]) = (1, 3, 31)` which sums to 35 (not divisible by 3).
- `(A[0], A[2], A[3]) = (1, 7, 13)` which sums to 21 (divisible by 3).
- And so on...

The function finally returns the count of such triples.
