[REASONING]
The function `is_nested` is called with the input string '[][][[]]'.
The function initializes two lists: `opening_bracket_index` and `closing_bracket_index` to keep track of the indices of opening and closing brackets respectively.

Iteration over the string:
- For each character in the string, the function checks if it is an opening bracket '['.
- If it is, the index is added to `opening_bracket_index`.
- If it is not, the index is added to `closing_bracket_index`.

After iterating through the string:
- The indices in `opening_bracket_index` are [0, 2, 5, 6].
- The indices in `closing_bracket_index` are [1, 3, 4, 7], which is then reversed to [7, 4, 3, 1].

Next, the function checks if there are nested brackets:
- It initializes a counter `cnt` to 0 and an index `i` to 0.
- It iterates over each index in `opening_bracket_index`.
- For each index, it checks if there is a corresponding closing bracket that comes after the opening bracket by comparing the current opening bracket index with the corresponding index in the reversed `closing_bracket_index`.
- If the condition is true, it increments the counter `cnt` and the index `i`.

Finally, the function checks if the counter `cnt` is greater than or equal to 2, indicating that there are at least two nested brackets.

In this case, the function finds that there are indeed nested brackets, and thus returns `True`.
[/REASONING]

[PYTHON]
from typing import *

def is_nested(string):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)): ## [STATE]i=[0, 1, 2, 3, 4, 5, 6, 7][/STATE][STATE]range(len(string))=[0, 1, 2, 3, 4, 5, 6, 7][/STATE][STATE]len(string)=8[/STATE]
        if string[i] == '[': ## [CONDITION](string[i] == '[')=[True, False, True, False, False, True, True, False][/CONDITION][BRANCH]taken=[Y, N, Y, N, N, Y, Y, N][/BRANCH]
            opening_bracket_index.append(i)
        else: ## [BRANCH]taken=[N, Y, N, Y, Y, N, N, Y][/BRANCH]
            closing_bracket_index.append(i)
    closing_bracket_index.reverse() ## [STATE]closing_bracket_index=[7, 4, 3, 1][/STATE]
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index: ## [STATE]idx=[0, 2, 5, 6][/STATE][STATE]opening_bracket_index=[0, 2, 5, 6][/STATE]
        if i < l and idx < closing_bracket_index[i]: ## [CONDITION](i < l and idx < closing_bracket_index[i])=[True, True, False, False][/CONDITION][CONDITION](i < l)=[True, True, True, True][/CONDITION][CONDITION](idx < closing_bracket_index[i])=[True, True, False, False][/CONDITION][BRANCH]taken=[Y, Y, N, N][/BRANCH]
            cnt += 1
            i += 1
    return cnt >= 2 ## [STATE]cnt=2[/STATE]
[/PYTHON]

[OUTPUT]
True
[/OUTPUT]