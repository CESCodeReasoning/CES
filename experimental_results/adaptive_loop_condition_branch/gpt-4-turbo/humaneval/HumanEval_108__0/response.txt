[REASONING]
The function `count_nums` is called with the argument `arr = [1]`.
The function defines a nested function `digits_sum` which calculates the sum of the digits of a number, adjusting for negative numbers.

1. The `digits_sum` function is called with `n = 1`.
   - The condition `n < 0` is checked. Since `n = 1`, the condition is false.
   - The number `n` is converted into a list of its digits: `[1]`.
   - The sum of the digits is calculated, which is `1` since there is only one digit.

2. The `count_nums` function then uses a list comprehension to apply `digits_sum` to each element in `arr`, resulting in a list `[1]`.
3. A `filter` function is used to count how many of these sums are greater than `0`. Since `1 > 0`, the count is `1`.

Therefore, the final output of the function `count_nums([1])` is `1`.
[/REASONING]

[PYTHON]
from typing import *

def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: ## [CONDITION](n < 0)=[False][/CONDITION][BRANCH]taken=[N][/BRANCH]
            n, neg = -1 * n, -1
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr]))) ## [STATE]arr=[1][/STATE][STATE][digits_sum(i) for i in arr]=[1][/STATE]
[/PYTHON]

[OUTPUT]
1
[/OUTPUT]