The function `fib` is called with ( n = 11 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 10 ) and ( n = 9 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 9 ) and ( n = 8 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 8 ) and ( n = 7 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 7 ) and ( n = 6 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 6 ) and ( n = 5 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 5 ) and ( n = 4 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 4 ) and ( n = 3 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 3 ) and ( n = 2 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is false, so the second if branch is not taken.
The function calls itself twice, with ( n = 2 ) and ( n = 1 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is true, so the second if branch is taken.
The function returns 1.
The function calls itself once, with ( n = 1 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is true, so the second if branch is taken.
The function returns 1.
The function calls itself once, with ( n = 0 ).
The condition `n == 0` is true, so the first if branch is taken.
The function returns 0.
The function calls itself once, with ( n = 1 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is true, so the second if branch is taken.
The function returns 1.
The function calls itself once, with ( n = 0 ).
The condition `n == 0` is true, so the first if branch is taken.
The function returns 0.
The function calls itself once, with ( n = 1 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is true, so the second if branch is taken.
The function returns 1.
The function calls itself once, with ( n = 0 ).
The condition `n == 0` is true, so the first if branch is taken.
The function returns 0.
The function calls itself once, with ( n = 1 ).
The condition `n == 0` is false, so the first if branch is not taken.
The condition `n == 1` is true, so the second if branch is taken.
The function returns 1.
The function calls itself once, with ( n = 0 ).
The condition `n == 0` is true, so the first if branch is taken.
The function returns 0.
The function calls itself once, with ( n = 1 ).
The condition `n == 0` is false, so the first if branch is