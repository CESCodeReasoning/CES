The function count_up_to(n) takes a number n as its parameter.
The outer loop iterates through each number from 2 to n-1.
In the inner loop, for each number indexed by i in the outer loop, check if it is a prime number.
First Iteration (i=2):
    - `i` is 2, j in the inner loop is 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17.
    - is_prime is True, check if 2 is a prime number:
        - When j = 2 (i % j == 0), the condition `i % j == 0` is True, the if branch is taken. Set is_prime to False and break out of the inner loop.
        - When j = 3 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 4 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 5 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 6 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 7 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 8 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 9 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 10 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 11 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 12 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 13 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 14 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 15 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 16 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 17 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
    - is_prime is still True, append 2 to primes.
Second Iteration (i=3):
    - `i` is 3, j in the inner loop is 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17.
    - is_prime is True, check if 3 is a prime number:
        - When j = 2 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 3 (i % j == 0), the condition `i % j == 0` is True, the if branch is taken. Set is_prime to False and break out of the inner loop.
        - When j = 4 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 5 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 6 (i % j == 0), the condition `i % j == 0` is False, the if branch is not taken.
        - When j = 7 (i % j == 0