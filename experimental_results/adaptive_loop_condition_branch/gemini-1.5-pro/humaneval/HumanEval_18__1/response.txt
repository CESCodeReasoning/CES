[REASONING]
The function `how_many_times` is called with ( string = 'john doe', substring = 'john' ).
Inside the function, a variable `times` is initialized to 0.

Iteration 1:
    - The substring 'john' is compared to the substring of 'john doe' from index 0 to 3 ( 'john' ).
    - Since they are equal, `times` is incremented to 1.

Iteration 2:
    - The substring 'john' is compared to the substring of 'john doe' from index 1 to 4 ( 'ohnd' ).
    - Since they are not equal, `times` remains 1.

Iteration 3:
    - The substring 'john' is compared to the substring of 'john doe' from index 2 to 5 ( 'hndo' ).
    - Since they are not equal, `times` remains 1.

Iteration 4:
    - The substring 'john' is compared to the substring of 'john doe' from index 3 to 6 ( 'ndoe' ).
    - Since they are not equal, `times` remains 1.

Iteration 5:
    - The substring 'john' is compared to the substring of 'john doe' from index 4 to 7 ( 'doe' ).
    - Since they are not equal, `times` remains 1.
[/REASONING]

[ANSWER]
from typing import *


def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1): ## [STATE]i=[0, 1, 2, 3, 4][/STATE][STATE]range(((len(string) - len(substring)) + 1))=[0, 1, 2, 3, 4][/STATE][STATE]((len(string) - len(substring)) + 1)=[5][/STATE]
        if string[i:i + len(substring)] == substring: ## [CONDITION](string[i:i + len(substring)] == substring)=[True, False, False, False, False][/CONDITION][BRANCH]taken=[Y, N, N, N, N][/BRANCH]
            times += 1

    return times
[/ANSWER]

[OUTPUT]
1
[/OUTPUT]