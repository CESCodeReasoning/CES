[REASONING]
The function `by_length` is called with (arr = [1, -1, 3, 2] ).
Inside the function, a dictionary `dic` is defined to map numbers to their corresponding string representations.
The array `arr` is sorted in descending order using `sorted(arr, reverse=True)`, resulting in `sorted_arr` = [3, 2, 1, -1].
An empty array `new_arr` is initialized to store the string representations of the numbers in `sorted_arr`.
The loop iterates over each element `var` in `sorted_arr`.
First Iteration (var = 3):
    `dic[var]` is 'Three', so 'Three' is appended to `new_arr`.
Second Iteration (var = 2):
    `dic[var]` is 'Two', so 'Two' is appended to `new_arr`.
Third Iteration (var = 1):
    `dic[var]` is 'One', so 'One' is appended to `new_arr`.
Fourth Iteration (var = -1):
    `dic[var]` is not defined, so the `except` block is executed and nothing is appended to `new_arr`.
[/REASONING]

[ANSWER]
from typing import *


def by_length(arr):
    dic = {
        1: "One",
        2: "Two",
        3: "Three",
        4: "Four",
        5: "Five",
        6: "Six",
        7: "Seven",
        8: "Eight",
        9: "Nine",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr: ## [STATE]var=[3, 2, 1, -1][/STATE][STATE]sorted_arr=[3, 2, 1, -1][/STATE]
        try:
            new_arr.append(dic[var])
        except BaseException:
            pass
    return new_arr
[/ANSWER]

[OUTPUT]
['Three', 'Two', 'One']
[/OUTPUT]