[REASONING]
The function `string_xor` takes two binary strings `a` and `b` as input and returns a new binary string that is the result of XORing the two input strings.
The function `xor` is a helper function that takes two characters `i` and `j` as input and returns '0' if the characters are the same, and '1' otherwise.
The function `string_xor` uses the `zip` function to iterate over the characters in the two input strings, and then calls the `xor` function on each pair of characters.
The results of the `xor` function calls are then joined together to form the output string.

For example, if `a` is '111000' and `b` is '101010', then the output of the `string_xor` function will be '010010'.
[/REASONING]

[ANSWER]
from typing import *
def string_xor(a: str, b: str) -> str:
    def xor(i, j):
        if i == j: ## [CONDITION](i == j)=[True, False, False, False, False, False][/CONDITION][BRANCH]taken=[Y, N, N, N, N, N][/BRANCH]
            return '0'
        else: ## [BRANCH]taken=[N, Y, Y, Y, Y, Y][/BRANCH]
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
[/ANSWER]

[OUTPUT]
010010
[/OUTPUT]