[REASONING]
The function common(l1: list, l2: list) takes two lists as its parameters.
The function returns a sorted list of the common elements in the two lists.
The function uses a set to store the common elements.
The function iterates over each element in the first list and then iterates over each element in the second list.
If the two elements are equal, the function adds the element to the set.
After iterating over all the elements in both lists, the function returns a sorted list of the common elements.
First Iteration (e1=5):
    - `e1` is 5, e2 in the inner loop is 3, 2:
        - When e2 = 3, the condition `e1 == e2` is False, the if branch is not taken.
        - When e2 = 2, the condition `e1 == e2` is False, the if branch is not taken.
Second Iteration (e1=3):
    - `e1` is 3, e2 in the inner loop is 3, 2:
        - When e2 = 3, the condition `e1 == e2` is True, the if branch is taken. Append 3 to ret.
        - When e2 = 2, the condition `e1 == e2` is False, the if branch is not taken.
Third Iteration (e1=2):
    - `e1` is 2, e2 in the inner loop is 3, 2:
        - When e2 = 3, the condition `e1 == e2` is False, the if branch is not taken.
        - When e2 = 2, the condition `e1 == e2` is True, the if branch is taken. Append 2 to ret.
Fourth Iteration (e1=8):
    - `e1` is 8, e2 in the inner loop is 3, 2:
        - When e2 = 3, the condition `e1 == e2` is False, the if branch is not taken.
        - When e2 = 2, the condition `e1 == e2` is False, the if branch is not taken.
[/REASONING]

[ANSWER]
from typing import *


def common(l1: list, l2: list):
    ret = set()
    for e1 in l1: ## [STATE]e1=[5, 3, 2, 8][/STATE][STATE]l1=[5, 3, 2, 8][/STATE]
        for e2 in l2: ## [STATE]e2=[3, 2][/STATE][STATE]l2=[3, 2][/STATE]
            if e1 == e2: ## [CONDITION](e1 == e2)=[False, True, True, False][/CONDITION][BRANCH]taken=[F, T, T, F][/BRANCH]
                ret.add(e1)
    return sorted(list(ret))
[/ANSWER]

[OUTPUT]
[2, 3]
[/OUTPUT]