The function `int_to_mini_roman` is called with ( number = 900 ).
Inside the function, a variable `res` is initialized to an empty string.
First Iteration:
    - number = 900, i = 12.
    - `div = number // num[i]` updates `div` to 2 ( 900 // 900 = 1 ).
    - `number %= num[i]` updates `number` to 0 ( 900 % 900 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "" + "CM" = "CM" ).
    - `div -= 1` updates `div` to 1 ( 2 - 1 = 1 ).
    - `i -= 1` updates `i` to 11 ( 12 - 1 = 11 ).
Second Iteration:
    - number = 0, i = 11.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 500 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 500 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "M" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 10 ( 11 - 1 = 10 ).
Third Iteration:
    - number = 0, i = 10.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 100 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 100 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "C" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 9 ( 10 - 1 = 9 ).
Fourth Iteration:
    - number = 0, i = 9.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 10 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 10 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "X" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 8 ( 9 - 1 = 8 ).
Fifth Iteration:
    - number = 0, i = 8.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 1 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 1 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "I" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 7 ( 8 - 1 = 7 ).
Sixth Iteration:
    - number = 0, i = 7.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 6 ( 7 - 1 = 6 ).
Seventh Iteration:
    - number = 0, i = 6.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 5 ( 6 - 1 = 5 ).
Eighth Iteration:
    - number = 0, i = 5.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 4 ( 5 - 1 = 4 ).
Ninth Iteration:
    - number = 0, i = 4.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 3 ( 4 - 1 = 3 ).
Tenth Iteration:
    - number = 0, i = 3.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 2 ( 3 - 1 = 2 ).
Eleventh Iteration:
    - number = 0, i = 2.
    - `div = number // num[i]` updates `div` to 0 ( 0 // 0 = 0 ).
    - `number %= num[i]` updates `number` to 0 ( 0 % 0 = 0 ).
    - `res += sym[i]` updates `res` to "CM" ( "CM" + "" = "CM" ).
    - `div -= 1` updates `div` to -1 ( 0 - 1 = -1 ).
    - `i -= 1` updates `i` to 1 ( 2 - 1