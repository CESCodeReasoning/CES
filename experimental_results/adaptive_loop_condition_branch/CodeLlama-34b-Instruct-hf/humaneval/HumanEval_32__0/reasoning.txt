The function `find_zero` is called with (xs = [5, 3, -5]).
Inside the function, two variables `begin` and `end` are initialized to -1.0 and 1.0, respectively.
The first while loop iterates until `poly(xs, begin) * poly(xs, end) <= 0`.
The first iteration (begin = -1.0, end = 1.0):
    - `poly(xs, begin) * poly(xs, end) = 5 * 1.0 - 3 * (-1.0) + (-5) * (-1.0) = 6`
    - `6 <= 0` is false, so the loop continues.
The second iteration (begin = -2.0, end = 2.0):
    - `poly(xs, begin) * poly(xs, end) = 5 * 2.0 - 3 * (-2.0) + (-5) * (-2.0) = 26`
    - `26 <= 0` is false, so the loop continues.
The third iteration (begin = -4.0, end = 4.0):
    - `poly(xs, begin) * poly(xs, end) = 5 * 4.0 - 3 * (-4.0) + (-5) * (-4.0) = 46`
    - `46 <= 0` is false, so the loop continues.
The fourth iteration (begin = -8.0, end = 8.0):
    - `poly(xs, begin) * poly(xs, end) = 5 * 8.0 - 3 * (-8.0) + (-5) * (-8.0) = 36`
    - `36 <= 0` is false, so the loop continues.
The fifth iteration (begin = -16.0, end = 16.0):
    - `poly(xs, begin) * poly(xs, end) = 5 * 16.0 - 3 * (-16.0) + (-5) * (-16.0) = -36`
    - `-36 <= 0` is true, so the loop exits.
The second while loop iterates until `end - begin <= 1e-10`.
The first iteration (begin = -16.0, end = 16.0):
    - `end - begin = 32.0`
    - `32.0 <= 1e-10` is false, so the loop continues.
The second iteration (begin = -8.0, end = 8.0):
    - `end - begin = 16.0`
    - `16.0 <= 1e-10` is false, so the loop continues.
The third iteration (begin = -4.0, end = 4.0):
    - `end - begin = 8.0`
    - `8.0 <= 1e-10` is false, so the loop continues.
The fourth iteration (begin = -2.0, end = 2.0):
    - `end - begin = 4.0`
    - `4.0 <= 1e-10` is false, so the loop continues.
The fifth iteration (begin = -1.0, end = 1.0):
    - `end - begin = 2.0`
    - `2.0 <= 1e-10` is true, so the loop exits.
The function returns `begin`, which is now 0.0.
