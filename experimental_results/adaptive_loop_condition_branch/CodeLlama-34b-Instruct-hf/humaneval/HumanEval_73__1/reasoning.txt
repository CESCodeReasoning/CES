The function `smallest_change` is called with ( arr = [1, 2, 3, 4, 3, 2, 2] ).
Inside the function, a variable `ans` is initialized to 0.

Iteration 1:
    - `i` is 0, which satisfies ( 0 <= i < (len(arr) // 2) ).
    - The condition `arr[i] != arr[len(arr) - i - 1]` is true (since `arr[0] = 1` and `arr[len(arr) - 0 - 1] = 2`).
    - Action: `ans += 1` updates `ans` to 1.
Iteration 2:
    - `i` is 1, which still satisfies ( 0 <= i < (len(arr) // 2) ).
    - The condition `arr[i] != arr[len(arr) - i - 1]` is true (since `arr[1] = 2` and `arr[len(arr) - 1 - 1] = 3`).
    - Action: `ans += 1` updates `ans` to 2.
Iteration 3:
    - `i` is 2, which still satisfies ( 0 <= i < (len(arr) // 2) ).
    - The condition `arr[i] != arr[len(arr) - i - 1]` is true (since `arr[2] = 3` and `arr[len(arr) - 2 - 1] = 4`).
    - Action: `ans += 1` updates `ans` to 3.
Iteration 4:
    - `i` is 3, which no longer satisfies ( 0 <= i < (len(arr) // 2) ).
    - The loop terminates.

Therefore, the final output of the function `smallest_change([1, 2, 3, 4, 3, 2, 2])` is 3.
