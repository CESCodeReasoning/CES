from typing import *


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers): ## [STATE]idx=[0, 1, 2, 3, 4][/STATE][STATE]elem=[1.1, 2.2, 3.1, 4.1, 5.1][/STATE][STATE]enumerate(numbers)=[0, 1, 2, 3, 4][/STATE][STATE]numbers=[1.1, 2.2, 3.1, 4.1, 5.1][/STATE]
        for idx2, elem2 in enumerate(numbers): ## [STATE]idx2=[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4][/STATE][STATE]elem2=[1.1, 2.2, 3.1, 4.1, 5.1, 1.1, 2.2, 3.1, 4.1, 5.1, 2.2, 3.1, 4.1, 5.1, 3.1, 4.1, 5.1, 4.1, 5.1][/STATE][STATE]enumerate(numbers)=[[0, 1, 2, 3, 4], [1, 2, 3, 4], [2, 3, 4], [3, 4], [4]][/STATE][STATE]numbers=[1.1, 2.2, 3.1, 4.1, 5.1][/STATE]
            if idx != idx2: ## [CONDITION](idx != idx2)=[True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False][/CONDITION][BRANCH]taken=[T, T, T, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F][/BRANCH]
                if distance is None: ## [CONDITION](distance is None)=[True, False, False, False, False][/CONDITION][BRANCH]taken=[T, F, F, F, F][/BRANCH]
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else: ## [BRANCH]taken=[F, T, T, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F][/BRANCH]
                    new_distance = abs(elem - elem2)
                    if new_distance < distance: ## [CONDITION](new_distance < distance)=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False][/CONDITION][BRANCH]taken=[F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F][/BRANCH]
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
