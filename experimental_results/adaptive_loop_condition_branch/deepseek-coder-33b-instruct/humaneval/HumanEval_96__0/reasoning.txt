The function count_up_to(n) takes an integer n as its parameter.
The outer loop iterates through each number from 2 to n-1.
In the inner loop, for each number indexed by i in the outer loop, check if it is divisible by any number from 2 to i-1.
First Iteration (i=2):
    - `i` is 2, j in the inner loop is 2.
    - 2 % 2 == 0 is False, so is_prime remains True.
    - Since is_prime is True, 2 is appended to primes.
Second Iteration (i=3):
    - `i` is 3, j in the inner loop is 2.
    - 3 % 2 == 0 is False, so is_prime remains True.
    - Since is_prime is True, 3 is appended to primes.
Third Iteration (i=4):
    - `i` is 4, j in the inner loop is 2.
    - 4 % 2 == 0 is True, so is_prime becomes False.
    - Since is_prime is False, 4 is not appended to primes.
Fourth Iteration (i=5):
    - `i` is 5, j in the inner loop is 2, 3, 4.
    - 5 % 2 == 0 is False, so is_prime remains True.
    - 5 % 3 == 0 is False, so is_prime remains True.
    - 5 % 4 == 0 is False, so is_prime remains True.
    - Since is_prime is True, 5 is appended to primes.
Fifth Iteration (i=6):
    - `i` is 6, j in the inner loop is 2, 3, 4, 5.
    - 6 % 2 == 0 is True, so is_prime becomes False.
    - Since is_prime is False, 6 is not appended to primes.
Sixth Iteration (i=7):
    - `i` is 7, j in the inner loop is 2, 3, 4, 5, 6.
    - 7 % 2 == 0 is False, so is_prime remains True.
    - 7 % 3 == 0 is False, so is_prime remains True.
    - 7 % 4 == 0 is False, so is_prime remains True.
    - 7 % 5 == 0 is False, so is_prime remains True.
    - 7 % 6 == 0 is False, so is_prime remains True.
    - Since is_prime is True, 7 is appended to primes.
This process continues until i is less than n.
