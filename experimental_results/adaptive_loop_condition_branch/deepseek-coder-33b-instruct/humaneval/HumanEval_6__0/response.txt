
[REASONING]
The function `parse_nested_parens` is called with ( paren_string = "((()))" ).
The function `parse_paren_group` is defined inside `parse_nested_parens`.

Iteration 1:
    -The character '(' is in '(', so depth becomes 1 and max_depth becomes 1.
Iteration 2:
    -The character '(' is in '(', so depth becomes 2 and max_depth becomes 2.
Iteration 3:
    -The character '(' is in '(', so depth becomes 3 and max_depth becomes 3.
Iteration 4:
    -The character ')' is not in '(', so depth becomes 2.
Iteration 5:
    -The character ')' is not in '(', so depth becomes 1.
Iteration 6:
    -The character ')' is not in '(', so depth becomes 0.

The function `parse_paren_group` returns the max_depth, which is 3.

The function `parse_nested_parens` returns a list with the max_depth, which is [3].
[/REASONING]

[ANSWER]
from typing import *


def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s: ## [STATE]c=['(', '(', '(', ')', ')', ')'][/STATE][STATE]s=["((()))"][/STATE]
            if c == '(': ## [CONDITION](c == '(')=[True, True, True, False, False, False][/CONDITION][BRANCH]taken=[Y, Y, Y, N, N, N][/BRANCH]
                depth += 1
                max_depth = max(depth, max_depth)
            else: ## [BRANCH]taken=[N, N, N, Y, Y, Y][/BRANCH]
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
[/ANSWER]

[OUTPUT]
[3]
[/OUTPUT]
