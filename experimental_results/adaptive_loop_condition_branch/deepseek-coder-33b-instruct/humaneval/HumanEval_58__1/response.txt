
[REASONING]
The function common(l1, l2) takes two lists as its parameters.
The outer loop iterates through each element in the first list.
The inner loop iterates through each element in the second list.
For each element in the first list, compare it with every element in the second list.
First Iteration (e1=5):
    - `e1` is 5, e2 in the inner loop is 3, 2, 8.
    - e1=5: compare with 3, 2, 8:
        - When e2 = 3 (e2=3), the condition `e1 == e2` is False, the if branch is not taken.
        - When e2 = 2 (e2=2), the condition `e1 == e2` is False, the if branch is not taken.
        - When e2 = 8 (e2=8), the condition `e1 == e2` is False, the if branch is not taken.
Second Iteration (e1=3):
    - `e1` is 3, e2 in the inner loop is 2, 8.
    - e1=3: compare with 2, 8:
        - When e2 = 2 (e2=2), the condition `e1 == e2` is True, the if branch is taken. Add 2 to ret.
        - When e2 = 8 (e2=8), the condition `e1 == e2` is False, the if branch is not taken.
Third Iteration (e1=2):
    - `e1` is 2, e2 in the inner loop is 8.
    - e1=2: compare with 8:
        - When e2 = 8 (e2=8), the condition `e1 == e2` is False, the if branch is not taken.
Forth Iteration (e1=8):
    - `e1` is 8, e2 in the inner loop is 2.
    - e1=8: compare with 2:
        - When e2 = 2 (e2=2), the condition `e1 == e2` is True, the if branch is taken. Add 8 to ret.
No more elements to compare.
[/REASONING]

[ANSWER]
from typing import *


def common(l1: list, l2: list):
    ret = set()
    for e1 in l1: ## [STATE]e1=[5, 3, 2, 8][/STATE][STATE]l1=[5, 3, 2, 8][/STATE]
        for e2 in l2: ## [STATE]e2=[3, 2, 8, 2][/STATE][STATE]l2=[3, 2, 8][/STATE]
            if e1 == e2: ## [CONDITION](e1 == e2)=[F, T, F, F, F, T][/CONDITION][BRANCH]taken=[F, T, F, F, F, T][/BRANCH]
                ret.add(e1)
    return sorted(list(ret))
[/ANSWER]

[OUTPUT]
[2, 3]
[/OUTPUT]
