
[REASONING]
The function `parse_nested_parens` is called with ( paren_string = '(()()) ((())) () ((())()())' ).
The function `parse_paren_group` is defined inside `parse_nested_parens`.

Iteration 1:
    -The character '(' is in '(()())', so depth becomes 1 and max_depth becomes 1.
Iteration 2:
    -The character ')' is not in '(()())', so depth becomes 0.
Iteration 3:
    -The character '(' is in '(()())', so depth becomes 1 and max_depth becomes 1.
Iteration 4:
    -The character ')' is not in '(()())', so depth becomes 0.
Iteration 5:
    -The character '(' is in '(()())', so depth becomes 1 and max_depth becomes 1.
Iteration 6:
    -The character ')' is not in '(()())', so depth becomes 0.
Iteration 7:
    -The character '(' is in '(()())', so depth becomes 1 and max_depth becomes 1.
Iteration 8:
    -The character ')' is not in '(()())', so depth becomes 0.
Iteration 9:
    -The character '(' is in '(()())', so depth becomes 1 and max_depth becomes 1.
Iteration 10:
    -The character ')' is not in '(()())', so depth becomes 0.
[/REASONING]

[ANSWER]
from typing import *
def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s: ## [STATE]c=['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')'][/STATE][STATE]s=["(()())", "((()))", "()", "((())()())"][/STATE]
            if c == '(': ## [CONDITION](c == '(')=[True, False, True, False, True, False, True, False, True, False, True, False][/CONDITION][BRANCH]taken=[Y, N, Y, N, Y, N, Y, N, Y, N, Y, N][/BRANCH]
                depth += 1
                max_depth = max(depth, max_depth)
            else: ## [BRANCH]taken=[N, Y, N, Y, N, Y, N, Y, N, Y, N, Y][/BRANCH]
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
[/ANSWER]

[OUTPUT]
[1, 2, 0, 2]
[/OUTPUT]
