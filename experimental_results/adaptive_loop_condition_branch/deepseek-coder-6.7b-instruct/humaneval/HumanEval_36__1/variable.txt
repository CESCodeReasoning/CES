from typing import *


def fizz_buzz(n: int):
    ns = []
    for i in range(n): ## [STATE]i=[0, 1, 2, ..., 199][/STATE][STATE]range(n)=[0, 1, 2, ..., 199][/STATE][STATE]n=[200][/STATE]
        if i % 11 == 0 or i % 13 == 0: ## [CONDITION](i % 11 == 0 or i % 13 == 0)=[True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False, True, False, ..., True, False