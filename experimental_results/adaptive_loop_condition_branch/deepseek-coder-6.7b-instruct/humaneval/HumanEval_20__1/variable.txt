from typing import *


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers): ## [STATE]idx=0, 1, 2, 3, 4, 5[/STATE][STATE]elem=1.0, 2.0, 3.0, 4.0, 5.0, 2.2[/STATE][STATE]enumerate(numbers)=[(0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0), (5, 2.2)], len(numbers)=6[/STATE]
        for idx2, elem2 in enumerate(numbers): ## [STATE]idx2=0, 1, 2, 3, 4, 5[/STATE][STATE]elem2=1.0, 2.0, 3.0, 4.0, 5.0, 2.2[/STATE][STATE]enumerate(numbers)=[(0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0), (5, 2.2)], len(numbers)=6[/STATE]
            if idx != idx2: ## [CONDITION](idx != idx2)=True, True, True, True, True, True[/CONDITION][BRANCH]taken=Y, Y, Y, Y, Y, Y[/BRANCH]
                if distance is None: ## [CONDITION](distance is None)=True, False, False, False, False, False[/CONDITION][BRANCH]taken=Y, N, N, N, N, N[/BRANCH]
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else: ## [BRANCH]taken=Y, Y, Y, Y, Y, Y[/BRANCH]
                    new_distance = abs(elem - elem2)
                    if new_distance < distance: ## [CONDITION](new_distance < distance)=False, False, True, False, False, False[/CONDITION][BRANCH]taken=N, N, Y, N, N, N[/BRANCH]
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
