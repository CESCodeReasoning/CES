The function `get_odd_collatz` is called with ( n = 1 ).
Inside the function, the condition `n % 2 == 0` is false. The else branch is taken.
The variable `odd_collatz` is initialized to `[1]`.
The loop iterates while `n` is greater than 1.
First Iteration (n = 1):
    - The condition `n % 2 == 0` is false. The else branch is taken.
    - `n` is updated to `n * 3 + 1` ( 1 * 3 + 1 = 4 ).
    - The condition `n % 2 == 1` is true. The number 4 is appended to `odd_collatz`.
Second Iteration (n = 4):
    - The condition `n % 2 == 0` is true. The if branch is taken.
    - `n` is updated to `n / 2` ( 4 / 2 = 2 ).
Third Iteration (n = 2):
    - The condition `n % 2 == 0` is true. The if branch is taken.
    - `n` is updated to `n / 2` ( 2 / 2 = 1 ).
Fourth Iteration (n = 1):
    - The condition `n % 2 == 0` is false. The else branch is taken.
    - `n` is updated to `n * 3 + 1` ( 1 * 3 + 1 = 4 ).
    - The condition `n % 2 == 1` is true. The number 4 is appended to `odd_collatz`.
After the loop completes, the function returns the sorted list of odd numbers in the Collatz sequence, which is `[1, 4]`.
