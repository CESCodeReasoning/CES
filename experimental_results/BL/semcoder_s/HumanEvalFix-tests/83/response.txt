<｜begin▁of▁sentence｜>

Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
                distance = elem - elem2
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def starts_one_ends(n):
    if n == 1: return 1
    return 18 * n * (10 ** (n - 2))

Tests:
def check(starts_one_ends):

    # Check some simple cases
    assert True, "This prints if this assert fails 1 (good for debugging!)"
    assert starts_one_ends(1) == 1
    assert starts_one_ends(2) == 18
    assert starts_one_ends(3) == 180
    assert starts_one_ends(4) == 1800
    assert starts_one_ends(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, "This prints if this assert fails 2 (also good for debugging!)"

check(starts_one_ends)

The code should satisfy the following natural language specification:
Write a Python function `starts_one_ends(n)` to solve the following problem:
Given a positive integer n, return the count of the numbers of n-digit
positive integers that start or end with 1.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return 18 * n * (10 ** (n - 2))
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_prime(n):
    if n < 2: return False
    if n == 2: return True
    if n % 2 == 0: return False
    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return False
    return True

def sum_of_primes(n):
    sum = 0
    for i in range(2, n + 1):
        if is_prime(i):
            sum += i
    return sum

Tests:
def check(sum_of_primes):
    assert sum_of_primes(10) == 17
    assert sum_of_primes(20) == 77
    assert sum_of_primes(30) == 173
    assert sum_of_primes(40) == 410
    assert sum_of_primes(50) == 867
    assert sum_of_primes(60) == 1597
    assert sum_of_primes(70) == 2685
    assert sum_of_primes(80) == 4231
    assert sum_of_primes(90) == 6322
    assert sum_of_primes(100) == 9061

check(sum_of_primes)

The code should satisfy the following natural language specification:
Write a Python function `sum_of_primes(n)` to solve the following problem:
Given a positive integer n, return the sum of all prime numbers that are less than or equal to n.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    for i in range(2, n + 1):
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is