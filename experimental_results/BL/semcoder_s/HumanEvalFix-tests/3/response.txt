<｜begin▁of▁sentence｜>

Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
                distance = elem - elem2
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance == 0:
            return True

    return False

Tests:
def check(below_zero):
    assert below_zero([]) == False
    assert below_zero([1, 2, -3, 1, 2, -3]) == False
    assert below_zero([1, 2, -4, 5, 6]) == True
    assert below_zero([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert below_zero([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert below_zero([1, -2, 2, -2, 5, -5, 4, -4]) == True

check(below_zero)

The code should satisfy the following natural language specification:
Write a Python function `below_zero(operations: List[int]) -> bool` to solve the following problem:
You're given a list of deposit and withdrawal operations on a bank account that starts with
zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
at that point function should return True. Otherwise it should return False.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
        balance += op
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def find_duplicates(numbers: List[int]) -> List[int]:
    duplicates = []
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2 and elem == elem2:
                duplicates.append(elem)

    return list(set(duplicates))

Tests:
def check(find_duplicates):
    assert find_duplicates([1, 2, 3, 4, 5, 2, 2]) == [2]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 1]) == [2, 1]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 3]) == [2, 3]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 4]) == [2, 4]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 5]) == [2, 5]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 1, 2]) == [2, 1]
    assert find_duplicates([1, 2, 3, 4, 5, 2, 1, 3]) == [2, 1, 3]

check(find_duplicates)

The code should satisfy the following natural language specification:
Write a Python function `find_duplicates(numbers: List[int]) -> List[int]` to solve the following problem:
Find all duplicate elements in the given list of numbers. The function should return a list of all
duplicate elements found in the list.

Response with the buggy line. Enclose your response with "```reponse" and "```