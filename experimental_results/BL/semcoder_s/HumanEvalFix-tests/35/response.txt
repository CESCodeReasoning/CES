<｜begin▁of▁sentence｜>

Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
                distance = elem - elem2
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def max_element(l: list):
    m = l[0]
    for e in l:
        if e < m:
            m = e
    return m

Tests:
def check(max_element):
    assert max_element([1, 2, 3]) == 3
    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

check(max_element)

The code should satisfy the following natural language specification:
Write a Python function `max_element(l: list)` to solve the following problem:
Return maximum element in the list.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return m
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def sum_of_elements(l: list):
    s = 0
    for e in l:
        s += e
    return s

Tests:
def check(sum_of_elements):
    assert sum_of_elements([1, 2, 3]) == 6
    assert sum_of_elements([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 137

check(sum_of_elements)

The code should satisfy the following natural language specification:
Write a Python function `sum_of_elements(l: list)` to solve the following problem:
Return sum of all elements in the list.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return s
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def reverse_list(l: list):
    for i in range(len(l) // 2):
        l[i], l[-i - 1] = l[-i - 1], l[i]
    return l

Tests:
def check(reverse_list):
    assert reverse_list([1, 2, 3]) == [3, 2, 1]
    assert reverse_list([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == [-10, 1, 124, 0, 9, 3, -3, 2, -5, 3, 5]

check(reverse_list)

The code should satisfy the following natural language specification:
Write a Python function `reverse_list(l: list)` to solve the following problem:
Reverse the given list in-place.

Response with the buggy line. Enclose your response with "```re