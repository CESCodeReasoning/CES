<｜begin▁of▁sentence｜>

Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = elem - elem2
                if distance < threshold:
                    return True

    return False

Tests:
def check(has_close_elements):
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

check(has_close_elements)

The code should satisfy the following natural language specification:
Write a Python function `has_close_elements(numbers: List[float], threshold: float) -> bool` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
                distance = elem - elem2
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number + min_number) for x in numbers]

Tests:
def check(rescale_to_unit):
    assert rescale_to_unit([2.0, 49.9]) == [0.0, 1.0]
    assert rescale_to_unit([100.0, 49.9]) == [1.0, 0.0]
    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]

check(rescale_to_unit)

The code should satisfy the following natural language specification:
Write a Python function `rescale_to_unit(numbers: List[float]) -> List[float]` to solve the following problem:
Given list of numbers (of at least two elements), apply a linear transform to that list,
such that the smallest number will become 0 and the largest will become 1

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return [(x - min_number) / (max_number + min_number) for x in numbers]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def find_closest_number(numbers: List[float], target: float) -> float:
    closest_number = None
    min_difference = float('inf')
    for number in numbers:
        difference = abs(number - target)
        if difference < min_difference:
            min_difference = difference
            closest_number = number
    return closest_number

Tests:
def check(find_closest_number):
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 3.5) == 3.0
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) == 3.0
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) == 1.0
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 5.0) == 5.0
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 10.0) == 5.0
    assert find_closest_number([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) == 1.0

check(find_closest_number)

The code should satisfy the following natural language specification:
Write a Python function `find_closest_number(numbers: List[float], target: float) -> float` to solve the following problem:
Given a list of numbers and a target number, find the number in the list that is closest to the target number.