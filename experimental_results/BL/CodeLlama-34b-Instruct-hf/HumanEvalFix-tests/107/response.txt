```response
    return (even_palindrome_count, odd_palindrome_count)
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def prime_factors(n):
    if n == 1:
        return [1]
    factors = []
    for i in range(2, int(n**0.5) + 1):
        if is_prime(i):
            while n % i == 0:
                factors.append(i)
                n = n // i
    if n > 1:
        factors.append(n)
    return factors

def is_prime_factors_unique(n):
    factors = prime_factors(n)
    return len(factors) == len(set(factors))

Tests:
def check(is_prime_factors_unique):
    assert is_prime_factors_unique(1) == True
    assert is_prime_factors_unique(2) == True
    assert is_prime_factors_unique(3) == True
    assert is_prime_factors_unique(4) == False
    assert is_prime_factors_unique(5) == True
    assert is_prime_factors_unique(6) == False
    assert is_prime_factors_unique(7) == True
    assert is_prime_factors_unique(8) == False
    assert is_prime_factors_unique(9) == False
    assert is_prime_factors_unique(10) == False
    assert is_prime_factors_unique(11) == True
    assert is_prime_factors_unique(12) == False
    assert is_prime_factors_unique(13) == True
    assert is_prime_factors_unique(14) == False
    assert is_prime_factors_unique(15) == False
