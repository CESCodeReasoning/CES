```response
    for i in range(len(string) - len(substring)):
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(numbers: List[float]) -> bool:
    for i in range(len(numbers) - 1):
        if numbers[i] > numbers[i + 1]:
            return False

    return True

Tests:
def check(is_sorted):
    assert is_sorted([1.0, 2.0, 3.0, 4.0, 5.0]) == True
    assert is_sorted([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == True
    assert is_sorted([1.0, 2.0, 3.0, 4.0, 5.0, 4.0]) == False
    assert is_sorted([1.0, 2.0, 3.0, 4.0, 5.0, 3.0]) == False
    assert is_sorted([1.0, 2.0, 3.0, 4.0, 5.0, 1.0]) == False

check(is_sorted)

The code should satisfy the following natural language specification:
Write a Python function `is_sorted(numbers: List[float]) -> bool` to solve the following problem:
Check if a given list of numbers is sorted in ascending order.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    for i in range(len(numbers) - 1):
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(numbers: List[float]) -> bool:
    for i in range(len(numbers) - 1):
        if numbers[i] > numbers[i + 1]:
            return False

    return True

Tests:
def check(is_sorted):
    assert is_sorted([1.