```response
        if text[i] != text[len(text) - i]:
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_palindrome(text: str):
    for i in range(len(text)):
        if text[i] != text[len(text) - i]:
            return False
    return True

Tests:
def check(is_palindrome):
    assert is_palindrome('') == True
    assert is_palindrome('aba') == True
    assert is_palindrome('aaaaa') == True
    assert is_palindrome('zbcd') == False
    assert is_palindrome('xywyx') == True
    assert is_palindrome('xywyz') == False
    assert is_palindrome('xywzx') == False

check(is_palindrome)

The code should satisfy the following natural language specification:
Write a Python function `is_palindrome(text: str)` to solve the following problem:
Checks if given string is a palindrome

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
        if text[i] != text[len(text) - i]:
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_palindrome(text: str):
    for i in range(len(text)):
        if text[i] != text[len(text) - i]:
            return False
    return True

Tests:
def check(is_palindrome):
    assert is_palindrome('') == True
    assert is_palindrome('aba') == True
    assert is_palindrome('aaaaa') == True
    assert is_palindrome('zbcd') == False
    assert is_palindrome('xywyx') == True
    assert is_palindrome('xywyz') == False
    assert is_palindrome('xywzx') == False

check(