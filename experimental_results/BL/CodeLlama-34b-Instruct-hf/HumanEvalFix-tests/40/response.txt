```response
                if l[i] + l[j] + l[k] == 0:
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(l: list) -> bool:
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            return False
    return True

Tests:
def check(is_sorted):
    assert is_sorted([]) == True
    assert is_sorted([1]) == True
    assert is_sorted([1, 2]) == True
    assert is_sorted([1, 2, 3]) == True
    assert is_sorted([1, 3, 2]) == False
    assert is_sorted([3, 2, 1]) == False
    assert is_sorted([1, 2, 3, 4]) == True
    assert is_sorted([1, 2, 4, 3]) == False
    assert is_sorted([1, 3, 2, 4]) == False
    assert is_sorted([1, 3, 4, 2]) == False
    assert is_sorted([1, 2, 3, 4, 5]) == True
    assert is_sorted([1, 2, 3, 5, 4]) == False
    assert is_sorted([1, 2, 4, 3, 5]) == False
    assert is_sorted([1, 2, 4, 5, 3]) == False
    assert is_sorted([1, 3, 2, 4, 5]) == False
    assert is_sorted([1, 3, 2, 5, 4]) == False
    assert is_sorted([1, 3, 4, 2, 5]) == False
    assert is_sorted([1, 3, 4, 5, 2]) == False
    assert is_sorted([3, 1, 2, 4, 5]) == False
    assert is_sorted([3, 1, 2, 5, 4])