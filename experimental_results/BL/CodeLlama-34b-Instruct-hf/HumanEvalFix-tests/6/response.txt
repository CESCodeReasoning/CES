```response
        max_depth = max(depth, max_depth)
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def find_longest_word(words: List[str]) -> str:
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word

    return longest_word

Tests:
def check(find_longest_word):
    assert find_longest_word(["hello", "world", "abc"]) == "world"
    assert find_longest_word(["hello", "world", "abc", "def"]) == "world"
    assert find_longest_word(["hello", "world", "abc", "def", "ghi"]) == "world"
    assert find_longest_word(["hello", "world", "abc", "def", "ghi", "jkl"]) == "world"
    assert find_longest_word(["hello", "world", "abc", "def", "ghi", "jkl", "mno"]) == "world"

check(find_longest_word)

The code should satisfy the following natural language specification:
Write a Python function `find_longest_word(words: List[str]) -> str` to solve the following problem:
Input to this function is a list of words.
Output the longest word in the list.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    longest_word = ""
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def find_longest_word(words: List[str]) -> str:
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word

    return longest_word

Tests:
def check(find_longest_word):
    assert find_longest_