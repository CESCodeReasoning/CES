```response
    return result
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def is_sorted(numbers: List[int]) -> bool:
    for i in range(len(numbers) - 1):
        if numbers[i] > numbers[i + 1]:
            return False

    return True

Tests:
def check(is_sorted):
    assert is_sorted([]) == True
    assert is_sorted([1]) == True
    assert is_sorted([1, 2]) == True
    assert is_sorted([1, 2, 3]) == True
    assert is_sorted([1, 3, 2]) == False
    assert is_sorted([3, 2, 1]) == False
    assert is_sorted([3, 2, 2]) == False
    assert is_sorted([1, 2, 3, 4, 5]) == True
    assert is_sorted([1, 2, 3, 5, 4]) == False
    assert is_sorted([1, 2, 2, 3, 4]) == False
    assert is_sorted([1, 2, 2, 2, 3]) == False
    assert is_sorted([1, 2, 2, 2, 2]) == True
    assert is_sorted([1, 2, 2, 2, 1]) == False

check(is_sorted)

The code should satisfy the following natural language specification:
Write a Python function `is_sorted(numbers: List[int]) -> bool` to solve the following problem:
Check if the input list of numbers is sorted in ascending order.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return True
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def is_sorted(numbers: List[int]) -> bool:
    for i in range(len(numbers) - 