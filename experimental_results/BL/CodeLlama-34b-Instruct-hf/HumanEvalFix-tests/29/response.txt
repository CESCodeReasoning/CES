```response
    return [x for x in strings if x.endswith(prefix)]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]

Tests:
def check(filter_by_prefix):
    assert filter_by_prefix([], 'john') == []
    assert filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

check(filter_by_prefix)

The code should satisfy the following natural language specification:
Write a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:
Filter an input list of strings only for ones that start with a given prefix.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return [x for x in strings if x.startswith(prefix)]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]

Tests:
def check(filter_by_prefix):
    assert filter_by_prefix([], 'john') == []
    assert filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']

check(filter_by_prefix)

The code should satisfy the following natural language specification:
Write a Python function `filter_by_prefix(strings: List[str], prefix: str) -> List[str]` to solve the following problem:
Filter an input list of