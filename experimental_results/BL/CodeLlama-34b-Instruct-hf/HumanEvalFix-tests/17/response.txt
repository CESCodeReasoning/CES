```response
    note_map = {'o': 3, 'o|': 2, '.|': 1}
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 3, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]

Tests:
def check(parse_music):
    assert parse_music('') == []
    assert parse_music('o o o o') == [4, 4, 4, 4]
    assert parse_music('.| .| .| .|') == [1, 1, 1, 1]
    assert parse_music('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert parse_music('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]

check(parse_music)

The code should satisfy the following natural language specification:
Write a Python function `parse_music(music_string: str) -> List[int]` to solve the following problem:
Input to this function is a string representing musical notes in a special ASCII format.
Your task is to parse this string and return list of integers corresponding to how many beats does each
not last.
Here is a legend:
'o' - whole note, lasts four beats
'o|' - half note, lasts two beats
'.|' - quater note, lasts one beat

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    note_map = {'o': 3, 'o|': 2, '.|': 1}
```



Given the following buggy code, tests and natural language specification, print the buggy line