```response
        if e >= t:
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(l: list):
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            return False
    return True

Tests:
def check(is_sorted):
    assert is_sorted([1, 2, 3, 4, 5])
    assert is_sorted([1, 2, 3, 4, 5, 6])
    assert is_sorted([1, 2, 3, 4, 5, 5])
    assert not is_sorted([1, 2, 3, 4, 5, 4])
    assert not is_sorted([1, 2, 3, 4, 5, 3])
    assert not is_sorted([1, 2, 3, 4, 5, 2])
    assert not is_sorted([1, 2, 3, 4, 5, 1])

check(is_sorted)

The code should satisfy the following natural language specification:
Write a Python function `is_sorted(l: list)` to solve the following problem:
Return True if the list l is sorted in ascending order.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
        if l[i] > l[i + 1]:
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(l: list):
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            return False
    return True

Tests:
def check(is_sorted):
    assert is_sorted([1, 2, 3, 4, 5])
    assert is_sorted([1, 2, 3, 4, 5, 6])
    assert is_sorted([