```response
    return bin([int(i) for i in str(N)][-1])[2:]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def solve(N):
    return bin([int(i) for i in str(N)][-1])[2:]

Tests:
def check(solve):

    # Check some simple cases
    assert True, "This prints if this assert fails 1 (good for debugging!)"
    assert solve(1000) == "1", "Error"
    assert solve(150) == "110", "Error"
    assert solve(147) == "1100", "Error"

    # Check some edge cases that are easy to work out by hand.
    assert True, "This prints if this assert fails 2 (also good for debugging!)"
    assert solve(333) == "1001", "Error"
    assert solve(963) == "10010", "Error"

check(solve)

The code should satisfy the following natural language specification:
Write a Python function `solve(N)` to solve the following problem:
Given a positive integer N, return the total sum of its digits in binary.
Example
For N = 1000, the sum of digits will be 1 the output should be "1".
For N = 150, the sum of digits will be 6 the output should be "110".
For N = 147, the sum of digits will be 12 the output should be "1100".
Variables:
@N integer
Constraints: 0 ≤ N ≤ 10000.
Output:
a string of binary number

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return bin([int(i) for i in str(N)][-1])[2:]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def solve