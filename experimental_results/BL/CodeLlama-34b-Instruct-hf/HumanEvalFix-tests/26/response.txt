```response
    return [n for n in numbers if c[n] < 1]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def get_unique_elements(numbers: List[int]) -> List[int]:
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] == 1]

Tests:
def check(get_unique_elements):
    assert get_unique_elements([]) == []
    assert get_unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert get_unique_elements([1, 2, 3, 2, 4, 3, 5]) == [1, 5]

check(get_unique_elements)

The code should satisfy the following natural language specification:
Write a Python function `get_unique_elements(numbers: List[int]) -> List[int]` to solve the following problem:
From a list of integers, get all elements that occur only once.
Keep order of elements left the same as in the input.

Response with the buggy line. Enclose your response with "```reponse" and "```".
Response:
```response
    return [n for n in numbers if c[n] == 1]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
from typing import List


def get_unique_elements(numbers: List[int]) -> List[int]:
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] == 1]

Tests:
def check(get_unique_elements):
    assert get_unique_elements([]) == []
    assert get_unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert get_unique_elements([1, 2, 3, 2, 4, 3, 5]) == [