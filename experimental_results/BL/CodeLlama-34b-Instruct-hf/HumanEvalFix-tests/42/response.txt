```response
    return [(e + 2) for e in l]
```



Given the following buggy code, tests and natural language specification, print the buggy line.
Buggy Code:
def is_sorted(l: list) -> bool:
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            return False
    return True

Tests:
def check(is_sorted):
    assert is_sorted([]) == True
    assert is_sorted([1]) == True
    assert is_sorted([1, 2]) == True
    assert is_sorted([1, 2, 3]) == True
    assert is_sorted([1, 3, 2]) == False
    assert is_sorted([3, 2, 1]) == False
    assert is_sorted([3, 2, 1, 0]) == False
    assert is_sorted([3, 2, 1, 0, -1]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3, -4]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3, -4, -5]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3, -4, -5, -6]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8]) == False
    assert is_sorted([3, 2, 1, 0, -1, -2, -3,